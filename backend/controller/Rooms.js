import dbPool from "../config/mysqldb.js";

// üìå L·∫•y t·∫•t c·∫£ ph√≤ng theo cinema_clusters_id
export const getRoomsOfCinema = async (req, res) => {
  try {
    const { cinemaId } = req.params;
    const [rows] = await dbPool.query(
      "SELECT * FROM rooms WHERE cinema_clusters_id = ?",
      [cinemaId]
    );

    if (rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng c√≥ d·ªØ li·ªáu ph√≤ng chi·∫øu t·∫°i r·∫°p n√†y",
      });
    }

    res.status(200).json({ success: true, rooms: rows });
  } catch (error) {
    console.error("‚ùå L·ªói getRoomsOfCinema:", error);
    res
      .status(500)
      .json({ success: false, message: "L·ªói server", error: error.message });
  }
};

// üìå L·∫•y chi ti·∫øt 1 ph√≤ng theo id
export const getRoomById = async (req, res) => {
  try {
    const { id } = req.params;
    const [rows] = await dbPool.query("SELECT * FROM rooms WHERE id = ?", [id]);

    if (rows.length === 0) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ph√≤ng chi·∫øu" });
    }

    res.status(200).json({ success: true, room: rows[0] });
  } catch (error) {
    console.error("‚ùå L·ªói getRoomById:", error);
    res
      .status(500)
      .json({ success: false, message: "L·ªói server", error: error.message });
  }
};

// üìå Th√™m ph√≤ng chi·∫øu
export const createRoom = async (req, res) => {
  try {
    const { cinema_clusters_id, name, capacity, type, status } = req.body;

    if (!cinema_clusters_id || !name || !capacity) {
      return res
        .status(400)
        .json({ success: false, message: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc" });
    }

    const [result] = await dbPool.query(
      "INSERT INTO rooms (cinema_clusters_id, name, capacity, type, status, created_at) VALUES (?, ?, ?, ?, ?, NOW())",
      [cinema_clusters_id, name, capacity, type || "2D", status || "AVAILABLE"]
    );

    res.status(201).json({
      success: true,
      message: "Th√™m ph√≤ng chi·∫øu th√†nh c√¥ng",
      room: { id: result.insertId, cinema_clusters_id, name, capacity, type, status },
    });
  } catch (error) {
    console.error("‚ùå L·ªói createRoom:", error);
    res
      .status(500)
      .json({ success: false, message: "L·ªói server", error: error.message });
  }
};

// üìå C·∫≠p nh·∫≠t ph√≤ng chi·∫øu
export const updateRoom = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, capacity, type, status } = req.body;

    const [result] = await dbPool.query(
      "UPDATE rooms SET name = ?, capacity = ?, type = ?, status = ? WHERE id = ?",
      [name, capacity, type, status, id]
    );

    if (result.affectedRows === 0) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ph√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t" });
    }

    res.json({ success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói updateRoom:", error);
    res
      .status(500)
      .json({ success: false, message: "L·ªói server", error: error.message });
  }
};

// üìå X√≥a ph√≤ng chi·∫øu
export const deleteRoom = async (req, res) => {
  try {
    const { id } = req.params;
    const [result] = await dbPool.query("DELETE FROM rooms WHERE id = ?", [id]);

    if (result.affectedRows === 0) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ph√≤ng ƒë·ªÉ x√≥a" });
    }

    res.json({ success: true, message: "X√≥a ph√≤ng chi·∫øu th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói deleteRoom:", error);
    res
      .status(500)
      .json({ success: false, message: "L·ªói server", error: error.message });
  }
};
